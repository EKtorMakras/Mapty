@use '../01-Abstracts'as *;


//& ******* Generic ******* //
// container
.container {
  @include center-mar;
  @include flex(column);
  max-width: var(--max-width);
  min-height: 100vh;
  padding: 5rem 3rem;

  @include respond(md) {
      padding: 0;
  }
}

// Break out of a container 
.bust-out {
    margin: 0 calc(50% - 50vw) 
} 

@mixin bust-out ($width: 20%) {
   margin: auto calc(50% - 50vw);
   width: $width;
   transform: translateX(calc(50vw - 50%));
 }


// clearfix
.clearfix {
    @include clearfix;
}


//& ******* Visibility ******* //
.hidden {
  visibility: hidden;
  opacity: 0;
  z-index: -1;
}

.shown {
    visibility: visible;
    opacity: 1;
    z-index: 1;
}

.d-none {
    display: none !important;
}


//& ******* Colored ******* //
.error {
    color: getColor(slate-50);
    background-color: getColor(error);
    padding: 4px 8px;
    border-radius: var(--radius-2);
}


//& ******* Radius ******* //
.sharp {
    border-radius: var(--radius-1) !important;
}

.rounded {
    border-radius: var(--radius-3) !important;
}

.pilled {
    border-radius: var(--pilled) !important;
}

.circle {
    border-radius: var(--circle) !important;
}


//& ******* Shadows ******* //
.shadow-light {
    box-shadow: var(--shadow-light) !important;
}

.shadow-dark {
    box-shadow: var(--shadow-dark) !important;
}


//& ******* Spacing ******* //
$subtractStep: 0.03rem;
$vwStep: 0.15vw;
$reduceAdjustment: 0.85;
$increaseAdjustment: 1.6;


@for $i from 1 through 35 {
  $baseValue: calc(#{$baseGutter} * #{$i});
  $subtractedValue: calc(#{$baseValue} * #{$reduceAdjustment});
  $middleValue: calc(#{$subtractedValue}  + (#{$vwStep} * #{$i}));
  $afterValue: calc(#{$baseValue} * #{$increaseAdjustment});
  $clampValue: clamp( $baseValue, $middleValue, $afterValue);

  // Margins
  .ma-#{$i}{
      margin: $clampValue;
  }
  .mt-#{$i}{
      margin-top: $clampValue;
  }
  .mb-#{$i}{
      margin-bottom: $clampValue;
  }
  .mr-#{$i}{
      margin-right: $clampValue;
  }
  .ml-#{$i}{
      margin-left: $clampValue;
  }
  .mx-#{$i}{
      margin-inline: $clampValue;
  }
  .my-#{$i}{
      margin-block: $clampValue;
  }
  .mx-auto {
      margin-inline: auto;
  }

  // Paddings
  .pa-#{$i}{
      padding: $baseValue;
  }
  .pt-#{$i}{
      padding-top: $baseValue;
  }
  .pb-#{$i}{
      padding-bottom: $baseValue;
  }
  .pr-#{$i}{
      padding-right: $baseValue;
  }
  .pl-#{$i}{
      padding-left: $baseValue;
  }
  .px-#{$i}{
      padding-inline: $baseValue;
  }
  .py-#{$i}{
      padding-block: $baseValue;
  }
}


//$ **************** Media Based Utils  ****************$//

$text-align-values: left, right, justify, center;

// center text
@each $val in $text-align-values {
  .text-#{$val}{
      text-align: $val;
  }
}


//& ******* Xs Breakpoint ******* //
@include respond(xs) {

  // center text
  @each $val in $text-align-values {
    .text-xs-#{$val}{
        text-align: $val;
    }
  }
}


//& ******* Sm Breakpoint ******* //
@include respond(sm) {

  // center text
  @each $val in $text-align-values {
    .text-sm-#{$val}{
        text-align: $val;
    }
  }
}


//& ******* Md Breakpoint ******* //
@include respond(md) {

  // center text
  @each $val in $text-align-values {
    .text-md-#{$val}{
        text-align: $val;
    }
  }
}


//& ******* Lg Breakpoint ******* //
@include respond(lg) {

  // center text
  @each $val in $text-align-values {
    .text-lg-#{$val}{
      text-align: $val;
    }
  } 
}


//& ******* Xl Breakpoint ******* //
@include respond(xl) {

  // center text
  @each $val in $text-align-values {
    .text-xl-#{$val}{
        text-align: $val;
    }
  } 
}